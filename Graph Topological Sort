import java.util.*;
class Graph
{
    ArrayList<Integer> vertex[] ;
    Graph(int v)
    {
        vertex = new ArrayList[v];
        for(int i=0;i<v;i++)
        {
            vertex[i]=new ArrayList();
        }
    }
    public void addEdge(int v1, int v2)
    {
        vertex[v1].add(v2);
    }
    public void topologicalOrder()
    {
        Queue<Integer> q = new LinkedList();
        int depend[]=new int[vertex.length];
        for(int i=0;i<vertex.length;i++)
        {
            for(int ad:vertex[i])
            depend[ad]++;
            
        }
        for(int i=0;i<vertex.length;i++)
        {
            if(depend[i]==0)
                q.add(i);
        }
        while(!q.isEmpty())
        {
            int root = q.poll();
            System.out.println(root);
            for(int i=0;i<vertex.length;i++)
            {
                if(vertex[root].contains(i))
                {
                    depend[i]--;
                    if(depend[i]==0)
                    {
                        q.add(i);
                    }
                }
            }
        }
    }
}
public class Sol
{
    public static void main(String args[])
    {
        Graph g = new Graph(6);
        g.addEdge(5, 2);
        g.addEdge(5, 0);
        g.addEdge(4, 0);
        g.addEdge(4, 1);
        g.addEdge(2, 3);
        g.addEdge(3, 1);
        g.topologicalOrder();
    }
}
