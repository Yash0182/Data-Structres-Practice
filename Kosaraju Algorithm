//This contains the code base to determine the stronhly connected components from a given Directed Graph.
//Implmentation of te Algorithm is done in JAVA programming language
//Three main steps of the algorithm as follows:
  //1. Push every vertex of the graph into stack on the order of their finish time
  //2. Reverse the entire graph edges
  //3. Pop out elements from stack and do DFS


import java.util.*;
public class StronglyConnected {
    ArrayList<Integer>vertex[] ;
    static Stack<Integer>st = new Stack();
    static HashSet<Integer>vis=new HashSet();;
    static List<List<Integer>>res;
    static int v;
    StronglyConnected(int v)
    {
        this.v=v;
        vertex = new ArrayList[v];
        res = new ArrayList();
        for(int i=0;i<v;i++)
        {
            vertex[i]=new ArrayList();
        }
    }
     void addEdge(int v1, int v2)
    {
             this.vertex[v1].add(v2);
    }
     void traverseGraph()
    {
        for(int i=1;i<this.vertex.length;i++)
        {
            if(vis.contains(i))
                continue;
            pushStack(i,this.vertex[i]);
        }
        System.out.println(st);
        vis.clear();
        StronglyConnected gr = reverseGraph();
        
        while(!st.isEmpty())
        {
            int i=st.pop();
            if(vis.contains(i))
                continue;
            gr.popStack(new ArrayList<Integer>(), i);
        }
    }
    void pushStack(int i, ArrayList<Integer> al)
    {
        vis.add(i);
            for(int ver:al)
        {
            if(vis.contains(ver))
                continue;
            pushStack(ver, this.vertex[ver]);
        }
        st.push(i);
        
    }
    StronglyConnected reverseGraph()
            {
                StronglyConnected g = new StronglyConnected(this.v);
                for(int i=0;i<this.vertex.length;i++)
                {
                    for(int ver:vertex[i])
                    {
                        g.vertex[ver].add(i);
                    }
                }
                return g;
            }
    void popStack(ArrayList<Integer> temp, int i)
    {
            if(vis.contains(i))
                return;
            vis.add(i);
            temp.add(i);
                for(int ver:this.vertex[i])
                {
                    if(vis.contains(ver))
                    {
                        continue;
                    }
                    this.popStack(temp,ver);
                }
                if(!res.contains(temp))
                       res.add(temp);
        }
    
    public static void main(String args[])
    {
        StronglyConnected g = new StronglyConnected(11);
        g.addEdge(0,1);
        g.addEdge(1,2);
        g.addEdge(2,0);
        g.addEdge(1,3);
        g.addEdge(3,4);
        g.addEdge(4,5);
        g.addEdge(5,3);
        g.addEdge(6,5);
        g.addEdge(6,7);
        g.addEdge(7,8);
        g.addEdge(8,9);
        g.addEdge(9,6);
        g.addEdge(9,10);
        g.traverseGraph();
        System.out.println(res);
    }
    }
