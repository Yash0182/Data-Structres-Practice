import java.util.*;
/*
To find LCA in Nary tree, traverse the Tree in Eularian Way (part of DFS) and construct two ArrayList
1. Euler arraylist: Keeps track of all the nodes coming in the way
2. Depth arraylist: Keeps track of the level
Find the minimum depth between the two nodes whose relation needed to be find out and record its index position.
Return the indexed value from the euler matrix.
*/
public class Tree
{
    ArrayList<Integer> child[];
    ArrayList<Integer> euler = new ArrayList();
    ArrayList<Integer> depth = new ArrayList();
    Tree(int limit)
    {
        child = new ArrayList[limit];
        for(int i=0;i<limit;i++)
        {
            child[i] = new ArrayList();
        }
    }
    public void addEdge(int v1,int v2)
    {
        child[v1].add(v2);
    }
    public List<Integer> eulerT(int root)
    {
        Stack<Integer>q = new Stack();
        q.add(root);
        eulerianTraversal(q,root,0);
        System.out.println(euler);
        return depth;
    }
    public void eulerianTraversal(Stack<Integer>q,int root, int level)
    {
        
        while(!q.isEmpty())
        {
            int node=q.pop();
            euler.add(node);
            depth.add(level);
            for(int temp:child[node])
            {
                q.add(temp);
                eulerianTraversal(q,temp,level+1);
                euler.add(node);
                depth.add(level);
            }
        }
    }
    
    public int relation(int v1, int v2)
    {
        int i1=euler.indexOf(v1);
        int i2=euler.indexOf(v2);
        int min=Integer.MAX_VALUE;
        int index=0;
        for(int i=i1;i<=i2;i++)
        {
            if(min>depth.get(i))
            {
                min=depth.get(i);
                index=i;
            }
        }
        return euler.get(index);
    }
    public static void main(String args[])
    {
        Tree t = new Tree(8);
        t.addEdge(0,1);
        t.addEdge(0,2);
        t.addEdge(1,3);
        t.addEdge(1,4);
        t.addEdge(1,5);
        t.addEdge(2,6);
        t.addEdge(2,7);
        System.out.println(t.eulerT(0));
        System.out.println(t.relation(4,5));
    }
}
